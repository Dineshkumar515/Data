apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'

buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
     dependencies { 
        classpath 'com.bmuschko:gradle-cargo-plugin:2.6.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
        
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}


dependencies {

    
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.0.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jersey', version: '2.0.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.0.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '2.0.1.RELEASE'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile group: "com.google.code.gson", name: "gson", version: "2.7"
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.9-rc'
    compile group: 'org.json', name: 'json', version:'20160212'
	compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
	compile group: 'com.itextpdf', name: 'html2pdf', version: '2.1.7'
	compile group: 'net.liftweb', name: 'http-authentication', version: '1.0.3'
	compile group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.2.21'
	compile group: 'org.springdoc', name: 'springdoc-openapi-data-rest', version: '1.2.21'
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
}

/////////// WAR FILE SETUP ////////////////////////////////////////////////////////////

def warfilepath = './build/libs/' + war.archiveName

def urlTomcat = project.hasProperty('SERVERHOSTIP') ? project.getProperty('SERVERHOSTIP') : "localhost"
def urlUser = project.hasProperty('SERVERUSER') ? project.getProperty('SERVERUSER') : "admin"
def urlPassword = project.hasProperty('SERVERPWD') ? project.getProperty('SERVERPWD') : "admin"
def urlProtocol = project.hasProperty('SERVERPROTOCOL') ? project.getProperty('SERVERPROTOCOL') : "http"
def urlVersion = project.hasProperty('SERVERVERSION') ? project.getProperty('SERVERVERSION') : "tomcat8x"
def urlTomcatPort = project.hasProperty('SERVERPORT') ? project.getProperty('SERVERPORT') : "80"
def urlTomcatPortInt = urlTomcatPort.toInteger()

cargoRedeployRemote.dependsOn assemble 
 
cargo {
    containerId = urlVersion
    
    deployable {
        file = file(warfilepath)
    }
    
    remote {
        hostname = urlTomcat
        port= urlTomcatPortInt
        username = urlUser
        password = urlPassword
        protocol = urlProtocol
    }   
}